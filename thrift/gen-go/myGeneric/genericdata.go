// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package myGeneric

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_SUCCESS TErrorCode = 200
  TErrorCode_ITEM_NOT_EXISTED TErrorCode = 404
  TErrorCode_ITEM_ALREADY_EXISTED TErrorCode = 422
  TErrorCode_UNKNOWN_EXCEPTION TErrorCode = 500
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_SUCCESS: return "SUCCESS"
  case TErrorCode_ITEM_NOT_EXISTED: return "ITEM_NOT_EXISTED"
  case TErrorCode_ITEM_ALREADY_EXISTED: return "ITEM_ALREADY_EXISTED"
  case TErrorCode_UNKNOWN_EXCEPTION: return "UNKNOWN_EXCEPTION"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "SUCCESS": return TErrorCode_SUCCESS, nil 
  case "ITEM_NOT_EXISTED": return TErrorCode_ITEM_NOT_EXISTED, nil 
  case "ITEM_ALREADY_EXISTED": return TErrorCode_ITEM_ALREADY_EXISTED, nil 
  case "UNKNOWN_EXCEPTION": return TErrorCode_UNKNOWN_EXCEPTION, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - PersonId
//  - PersonName
//  - BirthDate
//  - PersonAddress
type TPerson struct {
  PersonId string `thrift:"personId,1,required" db:"personId" json:"personId"`
  PersonName *string `thrift:"personName,2" db:"personName" json:"personName,omitempty"`
  BirthDate *string `thrift:"birthDate,3" db:"birthDate" json:"birthDate,omitempty"`
  PersonAddress *string `thrift:"personAddress,4" db:"personAddress" json:"personAddress,omitempty"`
}

func NewTPerson() *TPerson {
  return &TPerson{}
}


func (p *TPerson) GetPersonId() string {
  return p.PersonId
}
var TPerson_PersonName_DEFAULT string
func (p *TPerson) GetPersonName() string {
  if !p.IsSetPersonName() {
    return TPerson_PersonName_DEFAULT
  }
return *p.PersonName
}
var TPerson_BirthDate_DEFAULT string
func (p *TPerson) GetBirthDate() string {
  if !p.IsSetBirthDate() {
    return TPerson_BirthDate_DEFAULT
  }
return *p.BirthDate
}
var TPerson_PersonAddress_DEFAULT string
func (p *TPerson) GetPersonAddress() string {
  if !p.IsSetPersonAddress() {
    return TPerson_PersonAddress_DEFAULT
  }
return *p.PersonAddress
}
func (p *TPerson) IsSetPersonName() bool {
  return p.PersonName != nil
}

func (p *TPerson) IsSetBirthDate() bool {
  return p.BirthDate != nil
}

func (p *TPerson) IsSetPersonAddress() bool {
  return p.PersonAddress != nil
}

func (p *TPerson) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPersonId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPersonId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPersonId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PersonId is not set"));
  }
  return nil
}

func (p *TPerson)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PersonId = v
}
  return nil
}

func (p *TPerson)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PersonName = &v
}
  return nil
}

func (p *TPerson)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BirthDate = &v
}
  return nil
}

func (p *TPerson)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PersonAddress = &v
}
  return nil
}

func (p *TPerson) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPerson"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPerson) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("personId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:personId: ", p), err) }
  if err := oprot.WriteString(string(p.PersonId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.personId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:personId: ", p), err) }
  return err
}

func (p *TPerson) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersonName() {
    if err := oprot.WriteFieldBegin("personName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:personName: ", p), err) }
    if err := oprot.WriteString(string(*p.PersonName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.personName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:personName: ", p), err) }
  }
  return err
}

func (p *TPerson) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetBirthDate() {
    if err := oprot.WriteFieldBegin("birthDate", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:birthDate: ", p), err) }
    if err := oprot.WriteString(string(*p.BirthDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.birthDate (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:birthDate: ", p), err) }
  }
  return err
}

func (p *TPerson) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersonAddress() {
    if err := oprot.WriteFieldBegin("personAddress", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:personAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.PersonAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.personAddress (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:personAddress: ", p), err) }
  }
  return err
}

func (p *TPerson) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPerson(%+v)", *p)
}

// Attributes:
//  - TeamId
//  - TeamName
//  - TeamAddress
type TTeam struct {
  TeamId string `thrift:"teamId,1,required" db:"teamId" json:"teamId"`
  TeamName *string `thrift:"teamName,2" db:"teamName" json:"teamName,omitempty"`
  TeamAddress *string `thrift:"teamAddress,3" db:"teamAddress" json:"teamAddress,omitempty"`
}

func NewTTeam() *TTeam {
  return &TTeam{}
}


func (p *TTeam) GetTeamId() string {
  return p.TeamId
}
var TTeam_TeamName_DEFAULT string
func (p *TTeam) GetTeamName() string {
  if !p.IsSetTeamName() {
    return TTeam_TeamName_DEFAULT
  }
return *p.TeamName
}
var TTeam_TeamAddress_DEFAULT string
func (p *TTeam) GetTeamAddress() string {
  if !p.IsSetTeamAddress() {
    return TTeam_TeamAddress_DEFAULT
  }
return *p.TeamAddress
}
func (p *TTeam) IsSetTeamName() bool {
  return p.TeamName != nil
}

func (p *TTeam) IsSetTeamAddress() bool {
  return p.TeamAddress != nil
}

func (p *TTeam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTeamId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTeamId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTeamId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TeamId is not set"));
  }
  return nil
}

func (p *TTeam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TeamId = v
}
  return nil
}

func (p *TTeam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TeamName = &v
}
  return nil
}

func (p *TTeam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TeamAddress = &v
}
  return nil
}

func (p *TTeam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTeam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTeam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("teamId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:teamId: ", p), err) }
  if err := oprot.WriteString(string(p.TeamId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.teamId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:teamId: ", p), err) }
  return err
}

func (p *TTeam) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTeamName() {
    if err := oprot.WriteFieldBegin("teamName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:teamName: ", p), err) }
    if err := oprot.WriteString(string(*p.TeamName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.teamName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:teamName: ", p), err) }
  }
  return err
}

func (p *TTeam) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTeamAddress() {
    if err := oprot.WriteFieldBegin("teamAddress", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:teamAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.TeamAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.teamAddress (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:teamAddress: ", p), err) }
  }
  return err
}

func (p *TTeam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTeam(%+v)", *p)
}

// Attributes:
//  - Error
//  - Item
type TPersonResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Item *TPerson `thrift:"item,2" db:"item" json:"item,omitempty"`
}

func NewTPersonResult_() *TPersonResult_ {
  return &TPersonResult_{}
}


func (p *TPersonResult_) GetError() TErrorCode {
  return p.Error
}
var TPersonResult__Item_DEFAULT *TPerson
func (p *TPersonResult_) GetItem() *TPerson {
  if !p.IsSetItem() {
    return TPersonResult__Item_DEFAULT
  }
return p.Item
}
func (p *TPersonResult_) IsSetItem() bool {
  return p.Item != nil
}

func (p *TPersonResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPersonResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TPersonResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TPerson{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TPersonResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPersonResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPersonResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TPersonResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItem() {
    if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
    if err := p.Item.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  }
  return err
}

func (p *TPersonResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPersonResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Items
type TPeronSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Items []*TPerson `thrift:"items,2" db:"items" json:"items,omitempty"`
}

func NewTPeronSetResult_() *TPeronSetResult_ {
  return &TPeronSetResult_{}
}


func (p *TPeronSetResult_) GetError() TErrorCode {
  return p.Error
}
var TPeronSetResult__Items_DEFAULT []*TPerson

func (p *TPeronSetResult_) GetItems() []*TPerson {
  return p.Items
}
func (p *TPeronSetResult_) IsSetItems() bool {
  return p.Items != nil
}

func (p *TPeronSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPeronSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TPeronSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TPerson, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TPerson{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Items = append(p.Items, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPeronSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPeronSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPeronSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TPeronSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItems() {
    if err := oprot.WriteFieldBegin("items", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:items: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Items {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:items: ", p), err) }
  }
  return err
}

func (p *TPeronSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPeronSetResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Item
type TTeamResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Item *TTeam `thrift:"item,2" db:"item" json:"item,omitempty"`
}

func NewTTeamResult_() *TTeamResult_ {
  return &TTeamResult_{}
}


func (p *TTeamResult_) GetError() TErrorCode {
  return p.Error
}
var TTeamResult__Item_DEFAULT *TTeam
func (p *TTeamResult_) GetItem() *TTeam {
  if !p.IsSetItem() {
    return TTeamResult__Item_DEFAULT
  }
return p.Item
}
func (p *TTeamResult_) IsSetItem() bool {
  return p.Item != nil
}

func (p *TTeamResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTeamResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TTeamResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TTeam{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TTeamResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTeamResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTeamResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TTeamResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItem() {
    if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
    if err := p.Item.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  }
  return err
}

func (p *TTeamResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTeamResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Items
type TTeamSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Items []*TTeam `thrift:"items,2" db:"items" json:"items,omitempty"`
}

func NewTTeamSetResult_() *TTeamSetResult_ {
  return &TTeamSetResult_{}
}


func (p *TTeamSetResult_) GetError() TErrorCode {
  return p.Error
}
var TTeamSetResult__Items_DEFAULT []*TTeam

func (p *TTeamSetResult_) GetItems() []*TTeam {
  return p.Items
}
func (p *TTeamSetResult_) IsSetItems() bool {
  return p.Items != nil
}

func (p *TTeamSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTeamSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TTeamSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTeam, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TTeam{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Items = append(p.Items, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTeamSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTeamSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTeamSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TTeamSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItems() {
    if err := oprot.WriteFieldBegin("items", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:items: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Items {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:items: ", p), err) }
  }
  return err
}

func (p *TTeamSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTeamSetResult_(%+v)", *p)
}

type TGenericService interface {
  // Parameters:
  //  - BsKey
  //  - RootID
  GetItemPerson(ctx context.Context, bsKey string, rootID string) (r *TPersonResult_, err error)
  // Parameters:
  //  - BsKey
  GetItemsPerson(ctx context.Context, bsKey string) (r *TPeronSetResult_, err error)
  // Parameters:
  //  - BsKey
  //  - Offset
  //  - Limit
  GetPersonsPagination(ctx context.Context, bsKey string, offset int32, limit int32) (r *TPeronSetResult_, err error)
  // Parameters:
  //  - BsKey
  GetPersonsOfTeam(ctx context.Context, bsKey string) (r *TPeronSetResult_, err error)
  // Parameters:
  //  - BsKey
  //  - RootID
  GetItemTeam(ctx context.Context, bsKey string, rootID string) (r *TTeamResult_, err error)
  // Parameters:
  //  - BsKey
  GetItemsTeam(ctx context.Context, bsKey string) (r *TTeamSetResult_, err error)
  // Parameters:
  //  - BsKey
  //  - Offset
  //  - Limit
  GetTeamsPagination(ctx context.Context, bsKey string, offset int32, limit int32) (r *TTeamSetResult_, err error)
  // Parameters:
  //  - BsKey
  GetPersonIsTeam(ctx context.Context, bsKey string) (r *TTeamResult_, err error)
  // Parameters:
  //  - BsKey
  //  - Item
  PutItemPerson(ctx context.Context, bsKey string, item *TPerson) (err error)
  // Parameters:
  //  - BsKey
  //  - TeamId
  PutPersonIsTeam(ctx context.Context, bsKey string, teamId string) (err error)
  // Parameters:
  //  - BsKey
  //  - Item
  PutItemTeam(ctx context.Context, bsKey string, item *TTeam) (err error)
  // Parameters:
  //  - BsKey
  //  - PersonId
  PutPersonToTeam(ctx context.Context, bsKey string, personId string) (err error)
  // Parameters:
  //  - BsKey
  //  - RootID
  ItemIsExist(ctx context.Context, bsKey string, rootID string) (r bool, err error)
  // Parameters:
  //  - BsKey
  //  - RootID
  RemoveItem(ctx context.Context, bsKey string, rootID string) (err error)
}

type TGenericServiceClient struct {
  c thrift.TClient
}

func NewTGenericServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TGenericServiceClient {
  return &TGenericServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTGenericServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TGenericServiceClient {
  return &TGenericServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTGenericServiceClient(c thrift.TClient) *TGenericServiceClient {
  return &TGenericServiceClient{
    c: c,
  }
}

func (p *TGenericServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - BsKey
//  - RootID
func (p *TGenericServiceClient) GetItemPerson(ctx context.Context, bsKey string, rootID string) (r *TPersonResult_, err error) {
  var _args2 TGenericServiceGetItemPersonArgs
  _args2.BsKey = bsKey
  _args2.RootID = rootID
  var _result3 TGenericServiceGetItemPersonResult
  if err = p.Client_().Call(ctx, "getItemPerson", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - BsKey
func (p *TGenericServiceClient) GetItemsPerson(ctx context.Context, bsKey string) (r *TPeronSetResult_, err error) {
  var _args4 TGenericServiceGetItemsPersonArgs
  _args4.BsKey = bsKey
  var _result5 TGenericServiceGetItemsPersonResult
  if err = p.Client_().Call(ctx, "getItemsPerson", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - BsKey
//  - Offset
//  - Limit
func (p *TGenericServiceClient) GetPersonsPagination(ctx context.Context, bsKey string, offset int32, limit int32) (r *TPeronSetResult_, err error) {
  var _args6 TGenericServiceGetPersonsPaginationArgs
  _args6.BsKey = bsKey
  _args6.Offset = offset
  _args6.Limit = limit
  var _result7 TGenericServiceGetPersonsPaginationResult
  if err = p.Client_().Call(ctx, "getPersonsPagination", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - BsKey
func (p *TGenericServiceClient) GetPersonsOfTeam(ctx context.Context, bsKey string) (r *TPeronSetResult_, err error) {
  var _args8 TGenericServiceGetPersonsOfTeamArgs
  _args8.BsKey = bsKey
  var _result9 TGenericServiceGetPersonsOfTeamResult
  if err = p.Client_().Call(ctx, "getPersonsOfTeam", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - BsKey
//  - RootID
func (p *TGenericServiceClient) GetItemTeam(ctx context.Context, bsKey string, rootID string) (r *TTeamResult_, err error) {
  var _args10 TGenericServiceGetItemTeamArgs
  _args10.BsKey = bsKey
  _args10.RootID = rootID
  var _result11 TGenericServiceGetItemTeamResult
  if err = p.Client_().Call(ctx, "getItemTeam", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - BsKey
func (p *TGenericServiceClient) GetItemsTeam(ctx context.Context, bsKey string) (r *TTeamSetResult_, err error) {
  var _args12 TGenericServiceGetItemsTeamArgs
  _args12.BsKey = bsKey
  var _result13 TGenericServiceGetItemsTeamResult
  if err = p.Client_().Call(ctx, "getItemsTeam", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - BsKey
//  - Offset
//  - Limit
func (p *TGenericServiceClient) GetTeamsPagination(ctx context.Context, bsKey string, offset int32, limit int32) (r *TTeamSetResult_, err error) {
  var _args14 TGenericServiceGetTeamsPaginationArgs
  _args14.BsKey = bsKey
  _args14.Offset = offset
  _args14.Limit = limit
  var _result15 TGenericServiceGetTeamsPaginationResult
  if err = p.Client_().Call(ctx, "getTeamsPagination", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - BsKey
func (p *TGenericServiceClient) GetPersonIsTeam(ctx context.Context, bsKey string) (r *TTeamResult_, err error) {
  var _args16 TGenericServiceGetPersonIsTeamArgs
  _args16.BsKey = bsKey
  var _result17 TGenericServiceGetPersonIsTeamResult
  if err = p.Client_().Call(ctx, "getPersonIsTeam", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - BsKey
//  - Item
func (p *TGenericServiceClient) PutItemPerson(ctx context.Context, bsKey string, item *TPerson) (err error) {
  var _args18 TGenericServicePutItemPersonArgs
  _args18.BsKey = bsKey
  _args18.Item = item
  var _result19 TGenericServicePutItemPersonResult
  if err = p.Client_().Call(ctx, "putItemPerson", &_args18, &_result19); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - BsKey
//  - TeamId
func (p *TGenericServiceClient) PutPersonIsTeam(ctx context.Context, bsKey string, teamId string) (err error) {
  var _args20 TGenericServicePutPersonIsTeamArgs
  _args20.BsKey = bsKey
  _args20.TeamId = teamId
  var _result21 TGenericServicePutPersonIsTeamResult
  if err = p.Client_().Call(ctx, "putPersonIsTeam", &_args20, &_result21); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - BsKey
//  - Item
func (p *TGenericServiceClient) PutItemTeam(ctx context.Context, bsKey string, item *TTeam) (err error) {
  var _args22 TGenericServicePutItemTeamArgs
  _args22.BsKey = bsKey
  _args22.Item = item
  var _result23 TGenericServicePutItemTeamResult
  if err = p.Client_().Call(ctx, "putItemTeam", &_args22, &_result23); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - BsKey
//  - PersonId
func (p *TGenericServiceClient) PutPersonToTeam(ctx context.Context, bsKey string, personId string) (err error) {
  var _args24 TGenericServicePutPersonToTeamArgs
  _args24.BsKey = bsKey
  _args24.PersonId = personId
  var _result25 TGenericServicePutPersonToTeamResult
  if err = p.Client_().Call(ctx, "putPersonToTeam", &_args24, &_result25); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - BsKey
//  - RootID
func (p *TGenericServiceClient) ItemIsExist(ctx context.Context, bsKey string, rootID string) (r bool, err error) {
  var _args26 TGenericServiceItemIsExistArgs
  _args26.BsKey = bsKey
  _args26.RootID = rootID
  var _result27 TGenericServiceItemIsExistResult
  if err = p.Client_().Call(ctx, "itemIsExist", &_args26, &_result27); err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// Parameters:
//  - BsKey
//  - RootID
func (p *TGenericServiceClient) RemoveItem(ctx context.Context, bsKey string, rootID string) (err error) {
  var _args28 TGenericServiceRemoveItemArgs
  _args28.BsKey = bsKey
  _args28.RootID = rootID
  var _result29 TGenericServiceRemoveItemResult
  if err = p.Client_().Call(ctx, "removeItem", &_args28, &_result29); err != nil {
    return
  }
  return nil
}

type TGenericServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TGenericService
}

func (p *TGenericServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TGenericServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TGenericServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTGenericServiceProcessor(handler TGenericService) *TGenericServiceProcessor {

  self30 := &TGenericServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self30.processorMap["getItemPerson"] = &tGenericServiceProcessorGetItemPerson{handler:handler}
  self30.processorMap["getItemsPerson"] = &tGenericServiceProcessorGetItemsPerson{handler:handler}
  self30.processorMap["getPersonsPagination"] = &tGenericServiceProcessorGetPersonsPagination{handler:handler}
  self30.processorMap["getPersonsOfTeam"] = &tGenericServiceProcessorGetPersonsOfTeam{handler:handler}
  self30.processorMap["getItemTeam"] = &tGenericServiceProcessorGetItemTeam{handler:handler}
  self30.processorMap["getItemsTeam"] = &tGenericServiceProcessorGetItemsTeam{handler:handler}
  self30.processorMap["getTeamsPagination"] = &tGenericServiceProcessorGetTeamsPagination{handler:handler}
  self30.processorMap["getPersonIsTeam"] = &tGenericServiceProcessorGetPersonIsTeam{handler:handler}
  self30.processorMap["putItemPerson"] = &tGenericServiceProcessorPutItemPerson{handler:handler}
  self30.processorMap["putPersonIsTeam"] = &tGenericServiceProcessorPutPersonIsTeam{handler:handler}
  self30.processorMap["putItemTeam"] = &tGenericServiceProcessorPutItemTeam{handler:handler}
  self30.processorMap["putPersonToTeam"] = &tGenericServiceProcessorPutPersonToTeam{handler:handler}
  self30.processorMap["itemIsExist"] = &tGenericServiceProcessorItemIsExist{handler:handler}
  self30.processorMap["removeItem"] = &tGenericServiceProcessorRemoveItem{handler:handler}
return self30
}

func (p *TGenericServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x31 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x31.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x31

}

type tGenericServiceProcessorGetItemPerson struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetItemPerson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetItemPersonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetItemPersonResult{}
var retval *TPersonResult_
  var err2 error
  if retval, err2 = p.handler.GetItemPerson(ctx, args.BsKey, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemPerson: " + err2.Error())
    oprot.WriteMessageBegin("getItemPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemPerson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetItemsPerson struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetItemsPerson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetItemsPersonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemsPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetItemsPersonResult{}
var retval *TPeronSetResult_
  var err2 error
  if retval, err2 = p.handler.GetItemsPerson(ctx, args.BsKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemsPerson: " + err2.Error())
    oprot.WriteMessageBegin("getItemsPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemsPerson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetPersonsPagination struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetPersonsPagination) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetPersonsPaginationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getPersonsPagination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetPersonsPaginationResult{}
var retval *TPeronSetResult_
  var err2 error
  if retval, err2 = p.handler.GetPersonsPagination(ctx, args.BsKey, args.Offset, args.Limit); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPersonsPagination: " + err2.Error())
    oprot.WriteMessageBegin("getPersonsPagination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getPersonsPagination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetPersonsOfTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetPersonsOfTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetPersonsOfTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getPersonsOfTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetPersonsOfTeamResult{}
var retval *TPeronSetResult_
  var err2 error
  if retval, err2 = p.handler.GetPersonsOfTeam(ctx, args.BsKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPersonsOfTeam: " + err2.Error())
    oprot.WriteMessageBegin("getPersonsOfTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getPersonsOfTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetItemTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetItemTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetItemTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetItemTeamResult{}
var retval *TTeamResult_
  var err2 error
  if retval, err2 = p.handler.GetItemTeam(ctx, args.BsKey, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemTeam: " + err2.Error())
    oprot.WriteMessageBegin("getItemTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetItemsTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetItemsTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetItemsTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemsTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetItemsTeamResult{}
var retval *TTeamSetResult_
  var err2 error
  if retval, err2 = p.handler.GetItemsTeam(ctx, args.BsKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemsTeam: " + err2.Error())
    oprot.WriteMessageBegin("getItemsTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemsTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetTeamsPagination struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetTeamsPagination) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetTeamsPaginationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTeamsPagination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetTeamsPaginationResult{}
var retval *TTeamSetResult_
  var err2 error
  if retval, err2 = p.handler.GetTeamsPagination(ctx, args.BsKey, args.Offset, args.Limit); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTeamsPagination: " + err2.Error())
    oprot.WriteMessageBegin("getTeamsPagination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getTeamsPagination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetPersonIsTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetPersonIsTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetPersonIsTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getPersonIsTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetPersonIsTeamResult{}
var retval *TTeamResult_
  var err2 error
  if retval, err2 = p.handler.GetPersonIsTeam(ctx, args.BsKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPersonIsTeam: " + err2.Error())
    oprot.WriteMessageBegin("getPersonIsTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getPersonIsTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorPutItemPerson struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorPutItemPerson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServicePutItemPersonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putItemPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServicePutItemPersonResult{}
  var err2 error
  if err2 = p.handler.PutItemPerson(ctx, args.BsKey, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putItemPerson: " + err2.Error())
    oprot.WriteMessageBegin("putItemPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putItemPerson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorPutPersonIsTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorPutPersonIsTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServicePutPersonIsTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putPersonIsTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServicePutPersonIsTeamResult{}
  var err2 error
  if err2 = p.handler.PutPersonIsTeam(ctx, args.BsKey, args.TeamId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putPersonIsTeam: " + err2.Error())
    oprot.WriteMessageBegin("putPersonIsTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putPersonIsTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorPutItemTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorPutItemTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServicePutItemTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putItemTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServicePutItemTeamResult{}
  var err2 error
  if err2 = p.handler.PutItemTeam(ctx, args.BsKey, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putItemTeam: " + err2.Error())
    oprot.WriteMessageBegin("putItemTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putItemTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorPutPersonToTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorPutPersonToTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServicePutPersonToTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putPersonToTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServicePutPersonToTeamResult{}
  var err2 error
  if err2 = p.handler.PutPersonToTeam(ctx, args.BsKey, args.PersonId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putPersonToTeam: " + err2.Error())
    oprot.WriteMessageBegin("putPersonToTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putPersonToTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorItemIsExist struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorItemIsExist) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceItemIsExistArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("itemIsExist", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceItemIsExistResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ItemIsExist(ctx, args.BsKey, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing itemIsExist: " + err2.Error())
    oprot.WriteMessageBegin("itemIsExist", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("itemIsExist", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorRemoveItem struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceRemoveItemResult{}
  var err2 error
  if err2 = p.handler.RemoveItem(ctx, args.BsKey, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeItem: " + err2.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("removeItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BsKey
//  - RootID
type TGenericServiceGetItemPersonArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  RootID string `thrift:"rootID,2" db:"rootID" json:"rootID"`
}

func NewTGenericServiceGetItemPersonArgs() *TGenericServiceGetItemPersonArgs {
  return &TGenericServiceGetItemPersonArgs{}
}


func (p *TGenericServiceGetItemPersonArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceGetItemPersonArgs) GetRootID() string {
  return p.RootID
}
func (p *TGenericServiceGetItemPersonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemPersonArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetItemPersonArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RootID = v
}
  return nil
}

func (p *TGenericServiceGetItemPersonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemPerson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemPersonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemPersonArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rootID: ", p), err) }
  if err := oprot.WriteString(string(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rootID: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemPersonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemPersonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetItemPersonResult struct {
  Success *TPersonResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetItemPersonResult() *TGenericServiceGetItemPersonResult {
  return &TGenericServiceGetItemPersonResult{}
}

var TGenericServiceGetItemPersonResult_Success_DEFAULT *TPersonResult_
func (p *TGenericServiceGetItemPersonResult) GetSuccess() *TPersonResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetItemPersonResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetItemPersonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetItemPersonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemPersonResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPersonResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetItemPersonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemPerson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemPersonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetItemPersonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemPersonResult(%+v)", *p)
}

// Attributes:
//  - BsKey
type TGenericServiceGetItemsPersonArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
}

func NewTGenericServiceGetItemsPersonArgs() *TGenericServiceGetItemsPersonArgs {
  return &TGenericServiceGetItemsPersonArgs{}
}


func (p *TGenericServiceGetItemsPersonArgs) GetBsKey() string {
  return p.BsKey
}
func (p *TGenericServiceGetItemsPersonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsPersonArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetItemsPersonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemsPerson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemsPersonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemsPersonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemsPersonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetItemsPersonResult struct {
  Success *TPeronSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetItemsPersonResult() *TGenericServiceGetItemsPersonResult {
  return &TGenericServiceGetItemsPersonResult{}
}

var TGenericServiceGetItemsPersonResult_Success_DEFAULT *TPeronSetResult_
func (p *TGenericServiceGetItemsPersonResult) GetSuccess() *TPeronSetResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetItemsPersonResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetItemsPersonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetItemsPersonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsPersonResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPeronSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsPersonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemsPerson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemsPersonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetItemsPersonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemsPersonResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - Offset
//  - Limit
type TGenericServiceGetPersonsPaginationArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  Offset int32 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int32 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewTGenericServiceGetPersonsPaginationArgs() *TGenericServiceGetPersonsPaginationArgs {
  return &TGenericServiceGetPersonsPaginationArgs{}
}


func (p *TGenericServiceGetPersonsPaginationArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceGetPersonsPaginationArgs) GetOffset() int32 {
  return p.Offset
}

func (p *TGenericServiceGetPersonsPaginationArgs) GetLimit() int32 {
  return p.Limit
}
func (p *TGenericServiceGetPersonsPaginationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonsPaginationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetPersonsPaginationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *TGenericServiceGetPersonsPaginationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *TGenericServiceGetPersonsPaginationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPersonsPagination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetPersonsPaginationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetPersonsPaginationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *TGenericServiceGetPersonsPaginationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *TGenericServiceGetPersonsPaginationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetPersonsPaginationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetPersonsPaginationResult struct {
  Success *TPeronSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetPersonsPaginationResult() *TGenericServiceGetPersonsPaginationResult {
  return &TGenericServiceGetPersonsPaginationResult{}
}

var TGenericServiceGetPersonsPaginationResult_Success_DEFAULT *TPeronSetResult_
func (p *TGenericServiceGetPersonsPaginationResult) GetSuccess() *TPeronSetResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetPersonsPaginationResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetPersonsPaginationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetPersonsPaginationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonsPaginationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPeronSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonsPaginationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPersonsPagination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetPersonsPaginationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetPersonsPaginationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetPersonsPaginationResult(%+v)", *p)
}

// Attributes:
//  - BsKey
type TGenericServiceGetPersonsOfTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
}

func NewTGenericServiceGetPersonsOfTeamArgs() *TGenericServiceGetPersonsOfTeamArgs {
  return &TGenericServiceGetPersonsOfTeamArgs{}
}


func (p *TGenericServiceGetPersonsOfTeamArgs) GetBsKey() string {
  return p.BsKey
}
func (p *TGenericServiceGetPersonsOfTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonsOfTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetPersonsOfTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPersonsOfTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetPersonsOfTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetPersonsOfTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetPersonsOfTeamArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetPersonsOfTeamResult struct {
  Success *TPeronSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetPersonsOfTeamResult() *TGenericServiceGetPersonsOfTeamResult {
  return &TGenericServiceGetPersonsOfTeamResult{}
}

var TGenericServiceGetPersonsOfTeamResult_Success_DEFAULT *TPeronSetResult_
func (p *TGenericServiceGetPersonsOfTeamResult) GetSuccess() *TPeronSetResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetPersonsOfTeamResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetPersonsOfTeamResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetPersonsOfTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonsOfTeamResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPeronSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonsOfTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPersonsOfTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetPersonsOfTeamResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetPersonsOfTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetPersonsOfTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - RootID
type TGenericServiceGetItemTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  RootID string `thrift:"rootID,2" db:"rootID" json:"rootID"`
}

func NewTGenericServiceGetItemTeamArgs() *TGenericServiceGetItemTeamArgs {
  return &TGenericServiceGetItemTeamArgs{}
}


func (p *TGenericServiceGetItemTeamArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceGetItemTeamArgs) GetRootID() string {
  return p.RootID
}
func (p *TGenericServiceGetItemTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetItemTeamArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RootID = v
}
  return nil
}

func (p *TGenericServiceGetItemTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemTeamArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rootID: ", p), err) }
  if err := oprot.WriteString(string(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rootID: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemTeamArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetItemTeamResult struct {
  Success *TTeamResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetItemTeamResult() *TGenericServiceGetItemTeamResult {
  return &TGenericServiceGetItemTeamResult{}
}

var TGenericServiceGetItemTeamResult_Success_DEFAULT *TTeamResult_
func (p *TGenericServiceGetItemTeamResult) GetSuccess() *TTeamResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetItemTeamResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetItemTeamResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetItemTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemTeamResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTeamResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetItemTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemTeamResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetItemTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
type TGenericServiceGetItemsTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
}

func NewTGenericServiceGetItemsTeamArgs() *TGenericServiceGetItemsTeamArgs {
  return &TGenericServiceGetItemsTeamArgs{}
}


func (p *TGenericServiceGetItemsTeamArgs) GetBsKey() string {
  return p.BsKey
}
func (p *TGenericServiceGetItemsTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetItemsTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemsTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemsTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemsTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemsTeamArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetItemsTeamResult struct {
  Success *TTeamSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetItemsTeamResult() *TGenericServiceGetItemsTeamResult {
  return &TGenericServiceGetItemsTeamResult{}
}

var TGenericServiceGetItemsTeamResult_Success_DEFAULT *TTeamSetResult_
func (p *TGenericServiceGetItemsTeamResult) GetSuccess() *TTeamSetResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetItemsTeamResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetItemsTeamResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetItemsTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsTeamResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTeamSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemsTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemsTeamResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetItemsTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemsTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - Offset
//  - Limit
type TGenericServiceGetTeamsPaginationArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  Offset int32 `thrift:"offset,2" db:"offset" json:"offset"`
  Limit int32 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewTGenericServiceGetTeamsPaginationArgs() *TGenericServiceGetTeamsPaginationArgs {
  return &TGenericServiceGetTeamsPaginationArgs{}
}


func (p *TGenericServiceGetTeamsPaginationArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceGetTeamsPaginationArgs) GetOffset() int32 {
  return p.Offset
}

func (p *TGenericServiceGetTeamsPaginationArgs) GetLimit() int32 {
  return p.Limit
}
func (p *TGenericServiceGetTeamsPaginationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetTeamsPaginationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetTeamsPaginationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *TGenericServiceGetTeamsPaginationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *TGenericServiceGetTeamsPaginationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTeamsPagination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetTeamsPaginationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetTeamsPaginationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *TGenericServiceGetTeamsPaginationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *TGenericServiceGetTeamsPaginationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetTeamsPaginationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetTeamsPaginationResult struct {
  Success *TTeamSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetTeamsPaginationResult() *TGenericServiceGetTeamsPaginationResult {
  return &TGenericServiceGetTeamsPaginationResult{}
}

var TGenericServiceGetTeamsPaginationResult_Success_DEFAULT *TTeamSetResult_
func (p *TGenericServiceGetTeamsPaginationResult) GetSuccess() *TTeamSetResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetTeamsPaginationResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetTeamsPaginationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetTeamsPaginationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetTeamsPaginationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTeamSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetTeamsPaginationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTeamsPagination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetTeamsPaginationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetTeamsPaginationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetTeamsPaginationResult(%+v)", *p)
}

// Attributes:
//  - BsKey
type TGenericServiceGetPersonIsTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
}

func NewTGenericServiceGetPersonIsTeamArgs() *TGenericServiceGetPersonIsTeamArgs {
  return &TGenericServiceGetPersonIsTeamArgs{}
}


func (p *TGenericServiceGetPersonIsTeamArgs) GetBsKey() string {
  return p.BsKey
}
func (p *TGenericServiceGetPersonIsTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonIsTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetPersonIsTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPersonIsTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetPersonIsTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetPersonIsTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetPersonIsTeamArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetPersonIsTeamResult struct {
  Success *TTeamResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetPersonIsTeamResult() *TGenericServiceGetPersonIsTeamResult {
  return &TGenericServiceGetPersonIsTeamResult{}
}

var TGenericServiceGetPersonIsTeamResult_Success_DEFAULT *TTeamResult_
func (p *TGenericServiceGetPersonIsTeamResult) GetSuccess() *TTeamResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetPersonIsTeamResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetPersonIsTeamResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetPersonIsTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonIsTeamResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTeamResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetPersonIsTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPersonIsTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetPersonIsTeamResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetPersonIsTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetPersonIsTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - Item
type TGenericServicePutItemPersonArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  Item *TPerson `thrift:"item,2" db:"item" json:"item"`
}

func NewTGenericServicePutItemPersonArgs() *TGenericServicePutItemPersonArgs {
  return &TGenericServicePutItemPersonArgs{}
}


func (p *TGenericServicePutItemPersonArgs) GetBsKey() string {
  return p.BsKey
}
var TGenericServicePutItemPersonArgs_Item_DEFAULT *TPerson
func (p *TGenericServicePutItemPersonArgs) GetItem() *TPerson {
  if !p.IsSetItem() {
    return TGenericServicePutItemPersonArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TGenericServicePutItemPersonArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TGenericServicePutItemPersonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutItemPersonArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServicePutItemPersonArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TPerson{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TGenericServicePutItemPersonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItemPerson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutItemPersonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServicePutItemPersonArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TGenericServicePutItemPersonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutItemPersonArgs(%+v)", *p)
}

type TGenericServicePutItemPersonResult struct {
}

func NewTGenericServicePutItemPersonResult() *TGenericServicePutItemPersonResult {
  return &TGenericServicePutItemPersonResult{}
}

func (p *TGenericServicePutItemPersonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutItemPersonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItemPerson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutItemPersonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutItemPersonResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - TeamId
type TGenericServicePutPersonIsTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  TeamId string `thrift:"teamId,2" db:"teamId" json:"teamId"`
}

func NewTGenericServicePutPersonIsTeamArgs() *TGenericServicePutPersonIsTeamArgs {
  return &TGenericServicePutPersonIsTeamArgs{}
}


func (p *TGenericServicePutPersonIsTeamArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServicePutPersonIsTeamArgs) GetTeamId() string {
  return p.TeamId
}
func (p *TGenericServicePutPersonIsTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutPersonIsTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServicePutPersonIsTeamArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TeamId = v
}
  return nil
}

func (p *TGenericServicePutPersonIsTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putPersonIsTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutPersonIsTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServicePutPersonIsTeamArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("teamId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:teamId: ", p), err) }
  if err := oprot.WriteString(string(p.TeamId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.teamId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:teamId: ", p), err) }
  return err
}

func (p *TGenericServicePutPersonIsTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutPersonIsTeamArgs(%+v)", *p)
}

type TGenericServicePutPersonIsTeamResult struct {
}

func NewTGenericServicePutPersonIsTeamResult() *TGenericServicePutPersonIsTeamResult {
  return &TGenericServicePutPersonIsTeamResult{}
}

func (p *TGenericServicePutPersonIsTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutPersonIsTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putPersonIsTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutPersonIsTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutPersonIsTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - Item
type TGenericServicePutItemTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  Item *TTeam `thrift:"item,2" db:"item" json:"item"`
}

func NewTGenericServicePutItemTeamArgs() *TGenericServicePutItemTeamArgs {
  return &TGenericServicePutItemTeamArgs{}
}


func (p *TGenericServicePutItemTeamArgs) GetBsKey() string {
  return p.BsKey
}
var TGenericServicePutItemTeamArgs_Item_DEFAULT *TTeam
func (p *TGenericServicePutItemTeamArgs) GetItem() *TTeam {
  if !p.IsSetItem() {
    return TGenericServicePutItemTeamArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TGenericServicePutItemTeamArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TGenericServicePutItemTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutItemTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServicePutItemTeamArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TTeam{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TGenericServicePutItemTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItemTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutItemTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServicePutItemTeamArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TGenericServicePutItemTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutItemTeamArgs(%+v)", *p)
}

type TGenericServicePutItemTeamResult struct {
}

func NewTGenericServicePutItemTeamResult() *TGenericServicePutItemTeamResult {
  return &TGenericServicePutItemTeamResult{}
}

func (p *TGenericServicePutItemTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutItemTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItemTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutItemTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutItemTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - PersonId
type TGenericServicePutPersonToTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  PersonId string `thrift:"personId,2" db:"personId" json:"personId"`
}

func NewTGenericServicePutPersonToTeamArgs() *TGenericServicePutPersonToTeamArgs {
  return &TGenericServicePutPersonToTeamArgs{}
}


func (p *TGenericServicePutPersonToTeamArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServicePutPersonToTeamArgs) GetPersonId() string {
  return p.PersonId
}
func (p *TGenericServicePutPersonToTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutPersonToTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServicePutPersonToTeamArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PersonId = v
}
  return nil
}

func (p *TGenericServicePutPersonToTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putPersonToTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutPersonToTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServicePutPersonToTeamArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("personId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:personId: ", p), err) }
  if err := oprot.WriteString(string(p.PersonId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.personId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:personId: ", p), err) }
  return err
}

func (p *TGenericServicePutPersonToTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutPersonToTeamArgs(%+v)", *p)
}

type TGenericServicePutPersonToTeamResult struct {
}

func NewTGenericServicePutPersonToTeamResult() *TGenericServicePutPersonToTeamResult {
  return &TGenericServicePutPersonToTeamResult{}
}

func (p *TGenericServicePutPersonToTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutPersonToTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putPersonToTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutPersonToTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutPersonToTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - RootID
type TGenericServiceItemIsExistArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  RootID string `thrift:"rootID,2" db:"rootID" json:"rootID"`
}

func NewTGenericServiceItemIsExistArgs() *TGenericServiceItemIsExistArgs {
  return &TGenericServiceItemIsExistArgs{}
}


func (p *TGenericServiceItemIsExistArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceItemIsExistArgs) GetRootID() string {
  return p.RootID
}
func (p *TGenericServiceItemIsExistArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceItemIsExistArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceItemIsExistArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RootID = v
}
  return nil
}

func (p *TGenericServiceItemIsExistArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("itemIsExist_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceItemIsExistArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceItemIsExistArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rootID: ", p), err) }
  if err := oprot.WriteString(string(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rootID: ", p), err) }
  return err
}

func (p *TGenericServiceItemIsExistArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceItemIsExistArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceItemIsExistResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceItemIsExistResult() *TGenericServiceItemIsExistResult {
  return &TGenericServiceItemIsExistResult{}
}

var TGenericServiceItemIsExistResult_Success_DEFAULT bool
func (p *TGenericServiceItemIsExistResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TGenericServiceItemIsExistResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TGenericServiceItemIsExistResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceItemIsExistResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceItemIsExistResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TGenericServiceItemIsExistResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("itemIsExist_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceItemIsExistResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceItemIsExistResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceItemIsExistResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - RootID
type TGenericServiceRemoveItemArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  RootID string `thrift:"rootID,2" db:"rootID" json:"rootID"`
}

func NewTGenericServiceRemoveItemArgs() *TGenericServiceRemoveItemArgs {
  return &TGenericServiceRemoveItemArgs{}
}


func (p *TGenericServiceRemoveItemArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceRemoveItemArgs) GetRootID() string {
  return p.RootID
}
func (p *TGenericServiceRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RootID = v
}
  return nil
}

func (p *TGenericServiceRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rootID: ", p), err) }
  if err := oprot.WriteString(string(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rootID: ", p), err) }
  return err
}

func (p *TGenericServiceRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceRemoveItemArgs(%+v)", *p)
}

type TGenericServiceRemoveItemResult struct {
}

func NewTGenericServiceRemoveItemResult() *TGenericServiceRemoveItemResult {
  return &TGenericServiceRemoveItemResult{}
}

func (p *TGenericServiceRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceRemoveItemResult(%+v)", *p)
}


