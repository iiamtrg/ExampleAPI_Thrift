// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package myGeneric

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_SUCCESS TErrorCode = 200
  TErrorCode_ITEM_NOT_EXISTED TErrorCode = 404
  TErrorCode_ITEM_ALREADY_EXISTED TErrorCode = 422
  TErrorCode_UNKNOWN_EXCEPTION TErrorCode = 500
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_SUCCESS: return "SUCCESS"
  case TErrorCode_ITEM_NOT_EXISTED: return "ITEM_NOT_EXISTED"
  case TErrorCode_ITEM_ALREADY_EXISTED: return "ITEM_ALREADY_EXISTED"
  case TErrorCode_UNKNOWN_EXCEPTION: return "UNKNOWN_EXCEPTION"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "SUCCESS": return TErrorCode_SUCCESS, nil 
  case "ITEM_NOT_EXISTED": return TErrorCode_ITEM_NOT_EXISTED, nil 
  case "ITEM_ALREADY_EXISTED": return TErrorCode_ITEM_ALREADY_EXISTED, nil 
  case "UNKNOWN_EXCEPTION": return TErrorCode_UNKNOWN_EXCEPTION, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Year
//  - Month
//  - Day
type TDate struct {
  Year int32 `thrift:"year,1,required" db:"year" json:"year"`
  Month int32 `thrift:"month,2,required" db:"month" json:"month"`
  Day int32 `thrift:"day,3,required" db:"day" json:"day"`
}

func NewTDate() *TDate {
  return &TDate{}
}


func (p *TDate) GetYear() int32 {
  return p.Year
}

func (p *TDate) GetMonth() int32 {
  return p.Month
}

func (p *TDate) GetDay() int32 {
  return p.Day
}
func (p *TDate) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetYear bool = false;
  var issetMonth bool = false;
  var issetDay bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetYear = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetMonth = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetDay = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetYear{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Year is not set"));
  }
  if !issetMonth{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Month is not set"));
  }
  if !issetDay{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Day is not set"));
  }
  return nil
}

func (p *TDate)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Year = v
}
  return nil
}

func (p *TDate)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Month = v
}
  return nil
}

func (p *TDate)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Day = v
}
  return nil
}

func (p *TDate) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDate"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDate) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("year", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err) }
  if err := oprot.WriteI32(int32(p.Year)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err) }
  return err
}

func (p *TDate) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("month", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:month: ", p), err) }
  if err := oprot.WriteI32(int32(p.Month)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.month (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:month: ", p), err) }
  return err
}

func (p *TDate) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("day", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:day: ", p), err) }
  if err := oprot.WriteI32(int32(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:day: ", p), err) }
  return err
}

func (p *TDate) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDate(%+v)", *p)
}

// Attributes:
//  - PersonId
//  - PersonName
//  - BirthDate
//  - PersonAddress
//  - Team
type TPerson struct {
  PersonId string `thrift:"personId,1,required" db:"personId" json:"personId"`
  PersonName *string `thrift:"personName,2" db:"personName" json:"personName,omitempty"`
  BirthDate *TDate `thrift:"birthDate,3" db:"birthDate" json:"birthDate,omitempty"`
  PersonAddress *string `thrift:"personAddress,4" db:"personAddress" json:"personAddress,omitempty"`
  Team *TTeam `thrift:"team,5" db:"team" json:"team,omitempty"`
}

func NewTPerson() *TPerson {
  return &TPerson{}
}


func (p *TPerson) GetPersonId() string {
  return p.PersonId
}
var TPerson_PersonName_DEFAULT string
func (p *TPerson) GetPersonName() string {
  if !p.IsSetPersonName() {
    return TPerson_PersonName_DEFAULT
  }
return *p.PersonName
}
var TPerson_BirthDate_DEFAULT *TDate
func (p *TPerson) GetBirthDate() *TDate {
  if !p.IsSetBirthDate() {
    return TPerson_BirthDate_DEFAULT
  }
return p.BirthDate
}
var TPerson_PersonAddress_DEFAULT string
func (p *TPerson) GetPersonAddress() string {
  if !p.IsSetPersonAddress() {
    return TPerson_PersonAddress_DEFAULT
  }
return *p.PersonAddress
}
var TPerson_Team_DEFAULT *TTeam
func (p *TPerson) GetTeam() *TTeam {
  if !p.IsSetTeam() {
    return TPerson_Team_DEFAULT
  }
return p.Team
}
func (p *TPerson) IsSetPersonName() bool {
  return p.PersonName != nil
}

func (p *TPerson) IsSetBirthDate() bool {
  return p.BirthDate != nil
}

func (p *TPerson) IsSetPersonAddress() bool {
  return p.PersonAddress != nil
}

func (p *TPerson) IsSetTeam() bool {
  return p.Team != nil
}

func (p *TPerson) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPersonId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPersonId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPersonId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PersonId is not set"));
  }
  return nil
}

func (p *TPerson)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PersonId = v
}
  return nil
}

func (p *TPerson)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PersonName = &v
}
  return nil
}

func (p *TPerson)  ReadField3(iprot thrift.TProtocol) error {
  p.BirthDate = &TDate{}
  if err := p.BirthDate.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BirthDate), err)
  }
  return nil
}

func (p *TPerson)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PersonAddress = &v
}
  return nil
}

func (p *TPerson)  ReadField5(iprot thrift.TProtocol) error {
  p.Team = &TTeam{}
  if err := p.Team.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Team), err)
  }
  return nil
}

func (p *TPerson) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPerson"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPerson) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("personId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:personId: ", p), err) }
  if err := oprot.WriteString(string(p.PersonId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.personId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:personId: ", p), err) }
  return err
}

func (p *TPerson) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersonName() {
    if err := oprot.WriteFieldBegin("personName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:personName: ", p), err) }
    if err := oprot.WriteString(string(*p.PersonName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.personName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:personName: ", p), err) }
  }
  return err
}

func (p *TPerson) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetBirthDate() {
    if err := oprot.WriteFieldBegin("birthDate", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:birthDate: ", p), err) }
    if err := p.BirthDate.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BirthDate), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:birthDate: ", p), err) }
  }
  return err
}

func (p *TPerson) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersonAddress() {
    if err := oprot.WriteFieldBegin("personAddress", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:personAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.PersonAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.personAddress (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:personAddress: ", p), err) }
  }
  return err
}

func (p *TPerson) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTeam() {
    if err := oprot.WriteFieldBegin("team", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:team: ", p), err) }
    if err := p.Team.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Team), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:team: ", p), err) }
  }
  return err
}

func (p *TPerson) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPerson(%+v)", *p)
}

// Attributes:
//  - TeamId
//  - TeamName
//  - TeamAddress
//  - Persons
type TTeam struct {
  TeamId string `thrift:"teamId,1,required" db:"teamId" json:"teamId"`
  TeamName *string `thrift:"teamName,2" db:"teamName" json:"teamName,omitempty"`
  TeamAddress *string `thrift:"teamAddress,3" db:"teamAddress" json:"teamAddress,omitempty"`
  Persons []*TPerson `thrift:"persons,4" db:"persons" json:"persons,omitempty"`
}

func NewTTeam() *TTeam {
  return &TTeam{}
}


func (p *TTeam) GetTeamId() string {
  return p.TeamId
}
var TTeam_TeamName_DEFAULT string
func (p *TTeam) GetTeamName() string {
  if !p.IsSetTeamName() {
    return TTeam_TeamName_DEFAULT
  }
return *p.TeamName
}
var TTeam_TeamAddress_DEFAULT string
func (p *TTeam) GetTeamAddress() string {
  if !p.IsSetTeamAddress() {
    return TTeam_TeamAddress_DEFAULT
  }
return *p.TeamAddress
}
var TTeam_Persons_DEFAULT []*TPerson

func (p *TTeam) GetPersons() []*TPerson {
  return p.Persons
}
func (p *TTeam) IsSetTeamName() bool {
  return p.TeamName != nil
}

func (p *TTeam) IsSetTeamAddress() bool {
  return p.TeamAddress != nil
}

func (p *TTeam) IsSetPersons() bool {
  return p.Persons != nil
}

func (p *TTeam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTeamId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTeamId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTeamId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TeamId is not set"));
  }
  return nil
}

func (p *TTeam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TeamId = v
}
  return nil
}

func (p *TTeam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TeamName = &v
}
  return nil
}

func (p *TTeam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TeamAddress = &v
}
  return nil
}

func (p *TTeam)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TPerson, 0, size)
  p.Persons =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TPerson{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Persons = append(p.Persons, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTeam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTeam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTeam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("teamId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:teamId: ", p), err) }
  if err := oprot.WriteString(string(p.TeamId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.teamId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:teamId: ", p), err) }
  return err
}

func (p *TTeam) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTeamName() {
    if err := oprot.WriteFieldBegin("teamName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:teamName: ", p), err) }
    if err := oprot.WriteString(string(*p.TeamName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.teamName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:teamName: ", p), err) }
  }
  return err
}

func (p *TTeam) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTeamAddress() {
    if err := oprot.WriteFieldBegin("teamAddress", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:teamAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.TeamAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.teamAddress (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:teamAddress: ", p), err) }
  }
  return err
}

func (p *TTeam) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersons() {
    if err := oprot.WriteFieldBegin("persons", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:persons: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Persons)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Persons {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:persons: ", p), err) }
  }
  return err
}

func (p *TTeam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTeam(%+v)", *p)
}

// Attributes:
//  - Error
//  - Item
type TPersonResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Item *TPerson `thrift:"item,2" db:"item" json:"item,omitempty"`
}

func NewTPersonResult_() *TPersonResult_ {
  return &TPersonResult_{}
}


func (p *TPersonResult_) GetError() TErrorCode {
  return p.Error
}
var TPersonResult__Item_DEFAULT *TPerson
func (p *TPersonResult_) GetItem() *TPerson {
  if !p.IsSetItem() {
    return TPersonResult__Item_DEFAULT
  }
return p.Item
}
func (p *TPersonResult_) IsSetItem() bool {
  return p.Item != nil
}

func (p *TPersonResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPersonResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TPersonResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TPerson{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TPersonResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPersonResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPersonResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TPersonResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItem() {
    if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
    if err := p.Item.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  }
  return err
}

func (p *TPersonResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPersonResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Items
type TPeronSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Items []*TPerson `thrift:"items,2" db:"items" json:"items,omitempty"`
}

func NewTPeronSetResult_() *TPeronSetResult_ {
  return &TPeronSetResult_{}
}


func (p *TPeronSetResult_) GetError() TErrorCode {
  return p.Error
}
var TPeronSetResult__Items_DEFAULT []*TPerson

func (p *TPeronSetResult_) GetItems() []*TPerson {
  return p.Items
}
func (p *TPeronSetResult_) IsSetItems() bool {
  return p.Items != nil
}

func (p *TPeronSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPeronSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TPeronSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TPerson, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TPerson{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Items = append(p.Items, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPeronSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPeronSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPeronSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TPeronSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItems() {
    if err := oprot.WriteFieldBegin("items", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:items: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Items {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:items: ", p), err) }
  }
  return err
}

func (p *TPeronSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPeronSetResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Item
type TTeamResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Item *TTeam `thrift:"item,2" db:"item" json:"item,omitempty"`
}

func NewTTeamResult_() *TTeamResult_ {
  return &TTeamResult_{}
}


func (p *TTeamResult_) GetError() TErrorCode {
  return p.Error
}
var TTeamResult__Item_DEFAULT *TTeam
func (p *TTeamResult_) GetItem() *TTeam {
  if !p.IsSetItem() {
    return TTeamResult__Item_DEFAULT
  }
return p.Item
}
func (p *TTeamResult_) IsSetItem() bool {
  return p.Item != nil
}

func (p *TTeamResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTeamResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TTeamResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TTeam{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TTeamResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTeamResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTeamResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TTeamResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItem() {
    if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
    if err := p.Item.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  }
  return err
}

func (p *TTeamResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTeamResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Items
type TTeamSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Items []*TTeam `thrift:"items,2" db:"items" json:"items,omitempty"`
}

func NewTTeamSetResult_() *TTeamSetResult_ {
  return &TTeamSetResult_{}
}


func (p *TTeamSetResult_) GetError() TErrorCode {
  return p.Error
}
var TTeamSetResult__Items_DEFAULT []*TTeam

func (p *TTeamSetResult_) GetItems() []*TTeam {
  return p.Items
}
func (p *TTeamSetResult_) IsSetItems() bool {
  return p.Items != nil
}

func (p *TTeamSetResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTeamSetResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TTeamSetResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTeam, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TTeam{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Items = append(p.Items, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTeamSetResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTeamSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTeamSetResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TTeamSetResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetItems() {
    if err := oprot.WriteFieldBegin("items", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:items: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Items {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:items: ", p), err) }
  }
  return err
}

func (p *TTeamSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTeamSetResult_(%+v)", *p)
}

type TGenericService interface {
  // Parameters:
  //  - BsKey
  //  - RootID
  GetItemPerson(ctx context.Context, bsKey string, rootID string) (r *TPersonResult_, err error)
  // Parameters:
  //  - BsKey
  GetItemsPerson(ctx context.Context, bsKey string) (r *TPeronSetResult_, err error)
  // Parameters:
  //  - BsKey
  //  - Item
  PutItemPerson(ctx context.Context, bsKey string, item *TPerson) (err error)
  // Parameters:
  //  - BsKey
  //  - RootID
  GetItemTeam(ctx context.Context, bsKey string, rootID string) (r *TTeamResult_, err error)
  // Parameters:
  //  - BsKey
  GetItemsTeam(ctx context.Context, bsKey string) (r *TTeamSetResult_, err error)
  // Parameters:
  //  - BsKey
  //  - Item
  PutItemTeam(ctx context.Context, bsKey string, item *TTeam) (err error)
  // Parameters:
  //  - BsKey
  //  - RootID
  RemoveItem(ctx context.Context, bsKey string, rootID string) (err error)
  // Parameters:
  //  - BsKey
  RemoveAll(ctx context.Context, bsKey string) (err error)
}

type TGenericServiceClient struct {
  c thrift.TClient
}

func NewTGenericServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TGenericServiceClient {
  return &TGenericServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTGenericServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TGenericServiceClient {
  return &TGenericServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTGenericServiceClient(c thrift.TClient) *TGenericServiceClient {
  return &TGenericServiceClient{
    c: c,
  }
}

func (p *TGenericServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - BsKey
//  - RootID
func (p *TGenericServiceClient) GetItemPerson(ctx context.Context, bsKey string, rootID string) (r *TPersonResult_, err error) {
  var _args3 TGenericServiceGetItemPersonArgs
  _args3.BsKey = bsKey
  _args3.RootID = rootID
  var _result4 TGenericServiceGetItemPersonResult
  if err = p.Client_().Call(ctx, "getItemPerson", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - BsKey
func (p *TGenericServiceClient) GetItemsPerson(ctx context.Context, bsKey string) (r *TPeronSetResult_, err error) {
  var _args5 TGenericServiceGetItemsPersonArgs
  _args5.BsKey = bsKey
  var _result6 TGenericServiceGetItemsPersonResult
  if err = p.Client_().Call(ctx, "getItemsPerson", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - BsKey
//  - Item
func (p *TGenericServiceClient) PutItemPerson(ctx context.Context, bsKey string, item *TPerson) (err error) {
  var _args7 TGenericServicePutItemPersonArgs
  _args7.BsKey = bsKey
  _args7.Item = item
  var _result8 TGenericServicePutItemPersonResult
  if err = p.Client_().Call(ctx, "putItemPerson", &_args7, &_result8); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - BsKey
//  - RootID
func (p *TGenericServiceClient) GetItemTeam(ctx context.Context, bsKey string, rootID string) (r *TTeamResult_, err error) {
  var _args9 TGenericServiceGetItemTeamArgs
  _args9.BsKey = bsKey
  _args9.RootID = rootID
  var _result10 TGenericServiceGetItemTeamResult
  if err = p.Client_().Call(ctx, "getItemTeam", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - BsKey
func (p *TGenericServiceClient) GetItemsTeam(ctx context.Context, bsKey string) (r *TTeamSetResult_, err error) {
  var _args11 TGenericServiceGetItemsTeamArgs
  _args11.BsKey = bsKey
  var _result12 TGenericServiceGetItemsTeamResult
  if err = p.Client_().Call(ctx, "getItemsTeam", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

// Parameters:
//  - BsKey
//  - Item
func (p *TGenericServiceClient) PutItemTeam(ctx context.Context, bsKey string, item *TTeam) (err error) {
  var _args13 TGenericServicePutItemTeamArgs
  _args13.BsKey = bsKey
  _args13.Item = item
  var _result14 TGenericServicePutItemTeamResult
  if err = p.Client_().Call(ctx, "putItemTeam", &_args13, &_result14); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - BsKey
//  - RootID
func (p *TGenericServiceClient) RemoveItem(ctx context.Context, bsKey string, rootID string) (err error) {
  var _args15 TGenericServiceRemoveItemArgs
  _args15.BsKey = bsKey
  _args15.RootID = rootID
  var _result16 TGenericServiceRemoveItemResult
  if err = p.Client_().Call(ctx, "removeItem", &_args15, &_result16); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - BsKey
func (p *TGenericServiceClient) RemoveAll(ctx context.Context, bsKey string) (err error) {
  var _args17 TGenericServiceRemoveAllArgs
  _args17.BsKey = bsKey
  var _result18 TGenericServiceRemoveAllResult
  if err = p.Client_().Call(ctx, "removeAll", &_args17, &_result18); err != nil {
    return
  }
  return nil
}

type TGenericServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TGenericService
}

func (p *TGenericServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TGenericServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TGenericServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTGenericServiceProcessor(handler TGenericService) *TGenericServiceProcessor {

  self19 := &TGenericServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self19.processorMap["getItemPerson"] = &tGenericServiceProcessorGetItemPerson{handler:handler}
  self19.processorMap["getItemsPerson"] = &tGenericServiceProcessorGetItemsPerson{handler:handler}
  self19.processorMap["putItemPerson"] = &tGenericServiceProcessorPutItemPerson{handler:handler}
  self19.processorMap["getItemTeam"] = &tGenericServiceProcessorGetItemTeam{handler:handler}
  self19.processorMap["getItemsTeam"] = &tGenericServiceProcessorGetItemsTeam{handler:handler}
  self19.processorMap["putItemTeam"] = &tGenericServiceProcessorPutItemTeam{handler:handler}
  self19.processorMap["removeItem"] = &tGenericServiceProcessorRemoveItem{handler:handler}
  self19.processorMap["removeAll"] = &tGenericServiceProcessorRemoveAll{handler:handler}
return self19
}

func (p *TGenericServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x20 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x20.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x20

}

type tGenericServiceProcessorGetItemPerson struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetItemPerson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetItemPersonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetItemPersonResult{}
var retval *TPersonResult_
  var err2 error
  if retval, err2 = p.handler.GetItemPerson(ctx, args.BsKey, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemPerson: " + err2.Error())
    oprot.WriteMessageBegin("getItemPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemPerson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetItemsPerson struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetItemsPerson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetItemsPersonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemsPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetItemsPersonResult{}
var retval *TPeronSetResult_
  var err2 error
  if retval, err2 = p.handler.GetItemsPerson(ctx, args.BsKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemsPerson: " + err2.Error())
    oprot.WriteMessageBegin("getItemsPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemsPerson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorPutItemPerson struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorPutItemPerson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServicePutItemPersonArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putItemPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServicePutItemPersonResult{}
  var err2 error
  if err2 = p.handler.PutItemPerson(ctx, args.BsKey, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putItemPerson: " + err2.Error())
    oprot.WriteMessageBegin("putItemPerson", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putItemPerson", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetItemTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetItemTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetItemTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetItemTeamResult{}
var retval *TTeamResult_
  var err2 error
  if retval, err2 = p.handler.GetItemTeam(ctx, args.BsKey, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemTeam: " + err2.Error())
    oprot.WriteMessageBegin("getItemTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorGetItemsTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorGetItemsTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceGetItemsTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemsTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceGetItemsTeamResult{}
var retval *TTeamSetResult_
  var err2 error
  if retval, err2 = p.handler.GetItemsTeam(ctx, args.BsKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemsTeam: " + err2.Error())
    oprot.WriteMessageBegin("getItemsTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getItemsTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorPutItemTeam struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorPutItemTeam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServicePutItemTeamArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putItemTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServicePutItemTeamResult{}
  var err2 error
  if err2 = p.handler.PutItemTeam(ctx, args.BsKey, args.Item); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putItemTeam: " + err2.Error())
    oprot.WriteMessageBegin("putItemTeam", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("putItemTeam", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorRemoveItem struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceRemoveItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceRemoveItemResult{}
  var err2 error
  if err2 = p.handler.RemoveItem(ctx, args.BsKey, args.RootID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeItem: " + err2.Error())
    oprot.WriteMessageBegin("removeItem", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("removeItem", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGenericServiceProcessorRemoveAll struct {
  handler TGenericService
}

func (p *tGenericServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGenericServiceRemoveAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGenericServiceRemoveAllResult{}
  var err2 error
  if err2 = p.handler.RemoveAll(ctx, args.BsKey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin("removeAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("removeAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BsKey
//  - RootID
type TGenericServiceGetItemPersonArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  RootID string `thrift:"rootID,2" db:"rootID" json:"rootID"`
}

func NewTGenericServiceGetItemPersonArgs() *TGenericServiceGetItemPersonArgs {
  return &TGenericServiceGetItemPersonArgs{}
}


func (p *TGenericServiceGetItemPersonArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceGetItemPersonArgs) GetRootID() string {
  return p.RootID
}
func (p *TGenericServiceGetItemPersonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemPersonArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetItemPersonArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RootID = v
}
  return nil
}

func (p *TGenericServiceGetItemPersonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemPerson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemPersonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemPersonArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rootID: ", p), err) }
  if err := oprot.WriteString(string(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rootID: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemPersonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemPersonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetItemPersonResult struct {
  Success *TPersonResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetItemPersonResult() *TGenericServiceGetItemPersonResult {
  return &TGenericServiceGetItemPersonResult{}
}

var TGenericServiceGetItemPersonResult_Success_DEFAULT *TPersonResult_
func (p *TGenericServiceGetItemPersonResult) GetSuccess() *TPersonResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetItemPersonResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetItemPersonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetItemPersonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemPersonResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPersonResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetItemPersonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemPerson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemPersonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetItemPersonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemPersonResult(%+v)", *p)
}

// Attributes:
//  - BsKey
type TGenericServiceGetItemsPersonArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
}

func NewTGenericServiceGetItemsPersonArgs() *TGenericServiceGetItemsPersonArgs {
  return &TGenericServiceGetItemsPersonArgs{}
}


func (p *TGenericServiceGetItemsPersonArgs) GetBsKey() string {
  return p.BsKey
}
func (p *TGenericServiceGetItemsPersonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsPersonArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetItemsPersonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemsPerson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemsPersonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemsPersonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemsPersonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetItemsPersonResult struct {
  Success *TPeronSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetItemsPersonResult() *TGenericServiceGetItemsPersonResult {
  return &TGenericServiceGetItemsPersonResult{}
}

var TGenericServiceGetItemsPersonResult_Success_DEFAULT *TPeronSetResult_
func (p *TGenericServiceGetItemsPersonResult) GetSuccess() *TPeronSetResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetItemsPersonResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetItemsPersonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetItemsPersonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsPersonResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPeronSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsPersonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemsPerson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemsPersonResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetItemsPersonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemsPersonResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - Item
type TGenericServicePutItemPersonArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  Item *TPerson `thrift:"item,2" db:"item" json:"item"`
}

func NewTGenericServicePutItemPersonArgs() *TGenericServicePutItemPersonArgs {
  return &TGenericServicePutItemPersonArgs{}
}


func (p *TGenericServicePutItemPersonArgs) GetBsKey() string {
  return p.BsKey
}
var TGenericServicePutItemPersonArgs_Item_DEFAULT *TPerson
func (p *TGenericServicePutItemPersonArgs) GetItem() *TPerson {
  if !p.IsSetItem() {
    return TGenericServicePutItemPersonArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TGenericServicePutItemPersonArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TGenericServicePutItemPersonArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutItemPersonArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServicePutItemPersonArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TPerson{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TGenericServicePutItemPersonArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItemPerson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutItemPersonArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServicePutItemPersonArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TGenericServicePutItemPersonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutItemPersonArgs(%+v)", *p)
}

type TGenericServicePutItemPersonResult struct {
}

func NewTGenericServicePutItemPersonResult() *TGenericServicePutItemPersonResult {
  return &TGenericServicePutItemPersonResult{}
}

func (p *TGenericServicePutItemPersonResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutItemPersonResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItemPerson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutItemPersonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutItemPersonResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - RootID
type TGenericServiceGetItemTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  RootID string `thrift:"rootID,2" db:"rootID" json:"rootID"`
}

func NewTGenericServiceGetItemTeamArgs() *TGenericServiceGetItemTeamArgs {
  return &TGenericServiceGetItemTeamArgs{}
}


func (p *TGenericServiceGetItemTeamArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceGetItemTeamArgs) GetRootID() string {
  return p.RootID
}
func (p *TGenericServiceGetItemTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetItemTeamArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RootID = v
}
  return nil
}

func (p *TGenericServiceGetItemTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemTeamArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rootID: ", p), err) }
  if err := oprot.WriteString(string(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rootID: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemTeamArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetItemTeamResult struct {
  Success *TTeamResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetItemTeamResult() *TGenericServiceGetItemTeamResult {
  return &TGenericServiceGetItemTeamResult{}
}

var TGenericServiceGetItemTeamResult_Success_DEFAULT *TTeamResult_
func (p *TGenericServiceGetItemTeamResult) GetSuccess() *TTeamResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetItemTeamResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetItemTeamResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetItemTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemTeamResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTeamResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetItemTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemTeamResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetItemTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
type TGenericServiceGetItemsTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
}

func NewTGenericServiceGetItemsTeamArgs() *TGenericServiceGetItemsTeamArgs {
  return &TGenericServiceGetItemsTeamArgs{}
}


func (p *TGenericServiceGetItemsTeamArgs) GetBsKey() string {
  return p.BsKey
}
func (p *TGenericServiceGetItemsTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceGetItemsTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemsTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemsTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceGetItemsTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemsTeamArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGenericServiceGetItemsTeamResult struct {
  Success *TTeamSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGenericServiceGetItemsTeamResult() *TGenericServiceGetItemsTeamResult {
  return &TGenericServiceGetItemsTeamResult{}
}

var TGenericServiceGetItemsTeamResult_Success_DEFAULT *TTeamSetResult_
func (p *TGenericServiceGetItemsTeamResult) GetSuccess() *TTeamSetResult_ {
  if !p.IsSetSuccess() {
    return TGenericServiceGetItemsTeamResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGenericServiceGetItemsTeamResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGenericServiceGetItemsTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsTeamResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTeamSetResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGenericServiceGetItemsTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemsTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceGetItemsTeamResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGenericServiceGetItemsTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceGetItemsTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - Item
type TGenericServicePutItemTeamArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  Item *TTeam `thrift:"item,2" db:"item" json:"item"`
}

func NewTGenericServicePutItemTeamArgs() *TGenericServicePutItemTeamArgs {
  return &TGenericServicePutItemTeamArgs{}
}


func (p *TGenericServicePutItemTeamArgs) GetBsKey() string {
  return p.BsKey
}
var TGenericServicePutItemTeamArgs_Item_DEFAULT *TTeam
func (p *TGenericServicePutItemTeamArgs) GetItem() *TTeam {
  if !p.IsSetItem() {
    return TGenericServicePutItemTeamArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TGenericServicePutItemTeamArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TGenericServicePutItemTeamArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutItemTeamArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServicePutItemTeamArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Item = &TTeam{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TGenericServicePutItemTeamArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItemTeam_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutItemTeamArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServicePutItemTeamArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TGenericServicePutItemTeamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutItemTeamArgs(%+v)", *p)
}

type TGenericServicePutItemTeamResult struct {
}

func NewTGenericServicePutItemTeamResult() *TGenericServicePutItemTeamResult {
  return &TGenericServicePutItemTeamResult{}
}

func (p *TGenericServicePutItemTeamResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServicePutItemTeamResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putItemTeam_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServicePutItemTeamResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServicePutItemTeamResult(%+v)", *p)
}

// Attributes:
//  - BsKey
//  - RootID
type TGenericServiceRemoveItemArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
  RootID string `thrift:"rootID,2" db:"rootID" json:"rootID"`
}

func NewTGenericServiceRemoveItemArgs() *TGenericServiceRemoveItemArgs {
  return &TGenericServiceRemoveItemArgs{}
}


func (p *TGenericServiceRemoveItemArgs) GetBsKey() string {
  return p.BsKey
}

func (p *TGenericServiceRemoveItemArgs) GetRootID() string {
  return p.RootID
}
func (p *TGenericServiceRemoveItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceRemoveItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceRemoveItemArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RootID = v
}
  return nil
}

func (p *TGenericServiceRemoveItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceRemoveItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceRemoveItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rootID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rootID: ", p), err) }
  if err := oprot.WriteString(string(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rootID: ", p), err) }
  return err
}

func (p *TGenericServiceRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceRemoveItemArgs(%+v)", *p)
}

type TGenericServiceRemoveItemResult struct {
}

func NewTGenericServiceRemoveItemResult() *TGenericServiceRemoveItemResult {
  return &TGenericServiceRemoveItemResult{}
}

func (p *TGenericServiceRemoveItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceRemoveItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BsKey
type TGenericServiceRemoveAllArgs struct {
  BsKey string `thrift:"bsKey,1" db:"bsKey" json:"bsKey"`
}

func NewTGenericServiceRemoveAllArgs() *TGenericServiceRemoveAllArgs {
  return &TGenericServiceRemoveAllArgs{}
}


func (p *TGenericServiceRemoveAllArgs) GetBsKey() string {
  return p.BsKey
}
func (p *TGenericServiceRemoveAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceRemoveAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BsKey = v
}
  return nil
}

func (p *TGenericServiceRemoveAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceRemoveAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bsKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsKey: ", p), err) }
  if err := oprot.WriteString(string(p.BsKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsKey: ", p), err) }
  return err
}

func (p *TGenericServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceRemoveAllArgs(%+v)", *p)
}

type TGenericServiceRemoveAllResult struct {
}

func NewTGenericServiceRemoveAllResult() *TGenericServiceRemoveAllResult {
  return &TGenericServiceRemoveAllResult{}
}

func (p *TGenericServiceRemoveAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGenericServiceRemoveAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGenericServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGenericServiceRemoveAllResult(%+v)", *p)
}


